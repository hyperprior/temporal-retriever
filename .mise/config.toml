[tasks."deps:install"]
run = "uv pip install -r requirements.txt --system --compile"

[tasks."deps:add"]
args = ["dependency"]
run = "poetry add $dependency"

[tasks."deps:add-dev"]
args = ["dependency"]
run = "poetry add --group=dev $dependency"


[tasks."serve:dev"]
run = """
uv pip install -r requirements.txt --system
uvicorn temporal_retriever.app:app --host 0.0.0.0 --port 8000 --reload
"""

[tasks."docker:build"]
run = """
  VERSION=$(awk -F'"' '/^version/ {print $2}' pyproject.toml)
  echo "Using version=$VERSION"

  DOCKER_IMAGE="hyperprior/temporal-retriever"
  docker build -t "$DOCKER_IMAGE:$VERSION" -t "$DOCKER_IMAGE:latest" .
"""

[tasks."docker:push"]
depends = ["docker:build"]
run = """
  VERSION=$(awk -F'"' '/^version/ {print $2}' pyproject.toml)


  DOCKER_IMAGE="hyperprior/temporal-retriever"
  docker push "$DOCKER_IMAGE:$VERSION"
  docker push "$DOCKER_IMAGE:latest"
"""

[tasks."docker:run"]
depends = ["docker:build"]
run = "docker run -p 8000:8000 hyperprior/temporal-retriever:latest"


[tasks."git:rebase"]
run = "git pull --rebase"

[tasks."git:push"]
description = "interactively push changes to git"
run = """
  git add .
  git commit
  git push
"""

[tasks."test:unit"]
description = "unit tests"
run = "poetry run pytest -vvv"

[tasks."synthesize"]
run = "poetry run python -m synthesize_data"


[tasks.notebook]
run = "poetry run jupyter lab"

[tasks."test:integration"]
depends = ["docker:build"]
run = """
container_id=$(docker run -d -p 8080:8080 hyperprior/temporal-retriever:latest)

# Wait for the container to start
sleep 5

until $(curl --output /dev/null --silent --head --fail http://localhost:8080/health); do
    printf '.'
    sleep 5
done

echo "running tests in container=${container_id}"

collection_id=$(skate get temporal-retriever-collection-id@postman)
env_id=$(skate get temporal-retriever-collection-env@postman)
echo "using collection ${collection_id}"
echo "using collection env ${env_id}"

postman collection run $collection_id -e $env_id

exit_code=$?

docker kill $container_id

docker rm $container_id
exit $exit_code
"""
